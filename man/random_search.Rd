% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/random_search.R
\name{random_search}
\alias{random_search}
\title{Random optimalization of hiperparameters}
\usage{
random_search(
  train_data,
  test_data,
  y,
  models = NULL,
  engine,
  type,
  max_evals = 10,
  nr_return_models = 10
)
}
\arguments{
\item{train_data}{A training data for models created by `prepare_data`.}

\item{test_data}{A test data for models created by `prepare_data`.}

\item{y}{A string which indicates a target column name.}

\item{models}{A list of models trained by `train_models` function.
They will be compered with models train with different hiperparameters.}

\item{engine}{A vector of tree-based models that shall be created. Possible
values are: `ranger`, `xgboost`, `desicion tree`, `lightgbm`, `catboost`.}

\item{type}{A string which determines if machine learning task is the
`classification` or `regression`.}

\item{max_evals}{Number of trained models for each model type in `engine`.}

\item{nr_return_models}{Number of best models to return, `all` value is possible.}
}
\value{
A list consisting of models created via random search and ranked list
of models scores.
}
\description{
Random optimalization of hiperparameters
}
\examples{
data(iris)
iris_bin <- iris[1:100,]
type <- guess_type(iris_bin, 'Species')
preprocessed_data <- preprocessing(iris_bin, 'Species')
preprocessed_data <- preprocessed_data$data
split_data <-
  train_test_balance(preprocessed_data,
                     'Species',
                     type = type,
                     balance = FALSE)
train_data <-
  prepare_data(split_data$train,
               'Species',
               engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'))
test_data <-
  prepare_data(split_data$test,
               'Species',
               engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'),
               predict = TRUE,
               train = split_data$train)


model <-
  train_models(train_data,
               'Species',
               engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'),
               type = type)

predictions <-
  predict_models(model,
                 test_data,
                 'Species',
                 engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'),
                 type = type)

score <- score_models(model, predictions, test_data$ranger_data$Species, type)

random_best <- random_search(train_data,
                             test_data,
                             y = 'Species',
                             engine = c('ranger', 'xgboost', 'decision_tree',
                             'lightgbm', 'catboost'),
                             type = type,
                             max_evals = 4,
                             nr_return_models = 'all')
}
