% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/score_models.R
\name{score_models}
\alias{score_models}
\title{Score models by suitable metrics}
\usage{
score_models(
  models,
  predictions,
  observed,
  type,
  metrics = NULL,
  sort_by = "auto"
)
}
\arguments{
\item{models}{List of models trained by `train_models` function.}

\item{predictions}{List of predictions of every engine from test data.}

\item{observed}{Vector of true values from test data.}

\item{type}{String, determines if future task is `binary_clf` or `regression`.}

\item{metrics}{Vector of metrics names.}

\item{sort_by}{String with name of metric to sort by.}
}
\value{
data.frame with 'no.' - number of model from models,
'engine' - name of model from models, other metrics columns.
}
\description{
Score models by suitable metrics
}
\examples{
iris_bin <- iris[1:100, ]
iris_bin$Species <- factor(iris_bin$Species)
type <- guess_type(iris_bin, 'Species')
preprocessed_data <- preprocessing(iris_bin, 'Species')
preprocessed_data <- preprocessed_data$data
split_data <-
  train_test_balance(preprocessed_data,
                     'Species',
                     type = type,
                     balance = FALSE)
train_data <-
  prepare_data(split_data$train,
               'Species',
               engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'))
test_data <-
  prepare_data(split_data$test,
               'Species',
               engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'),
               predict = TRUE,
               train = split_data$train)
suppressWarnings(
  model <-
    train_models(train_data,
                 'Species',
                 engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'),
                 type = type)
)
predictions <-
  predict_models(model,
                 test_data,
                 'Species',
                 engine = c('ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'),
                 type = type)
score <-
  score_models(model,
               predictions,
               observed = split_data$test$Species,
               type = type)
}
