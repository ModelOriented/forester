% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train.R
\name{train}
\alias{train}
\title{Train models with forester}
\usage{
train(
  data,
  y,
  type = "auto",
  engine = c("ranger", "xgboost", "decision_tree", "lightgbm", "catboost"),
  loss = "default",
  validation = "default",
  tuning = "default",
  keep = FALSE,
  verbose = TRUE,
  bayes_iter = 10,
  random_evals = 10,
  advanced_preprocessing = FALSE,
  metrics = "auto",
  sort_by = "auto",
  metric_function = NULL,
  metric_function_name = NULL,
  metric_function_decreasing = TRUE,
  best_model_number = 5
)
}
\arguments{
\item{data}{A `data.frame` or `matrix` - data which will be
used to build models. By default model will be trained
on all columns in the `data`.}

\item{y}{A target variable. It can be either
(1) a vector of the same number of observations as `data` or
(2) a character name of variable in the `data` that contains
the target variable.}

\item{type}{A character, one of `classification`/`regression`/`guess` that
sets the type of the task. If `guess` (the default option) then
forester will figure out `type` based on the number of unique values
in the `y` variable.}

\item{engine}{A vector of tree-based models that shall be tested.
Possible values are: `ranger`, `xgboost`, `decision_tree`, `lightgbm`, `catboost`.
All models from this vector will be trained and the best one will be returned.}

\item{loss}{A character with the name of the loss function.
If `default` then the default loss function for a given task will be used.}

\item{validation}{A validation/model selection a character of
data.frame. If `data.frame` then this data will be used for the model
assessment and selection. If `character`, then it will be a name of
the hyperparameter.}

\item{tuning}{A character with the name of the tuning procedure.
one out of `default`/`portfolio`/`bayesian`/`random search`.
If `default` then no tuning, just default hyperparameteres are used.
If `portfolio` then static portfolio of hyperparametes are tried.
If `bayesian` then Bayesian optimization is performed.
If `random search` then random search is performed.}

\item{keep}{Shall all models be returned (`keep = FALSE`) or only the best one
(`keep = FALSE`, default option)?}

\item{verbose}{A logical value, if set to TRUE, provides all information about
training process, if FALSE gives none.}

\item{bayes_iter}{An integer value describing number of optimization rounds
used by Bayesian optimization.}

\item{random_evals}{An integer value describing number of trained models
with different parameters by random search.}

\item{advanced_preprocessing}{A logical value describing, whether the user wants to use
advanced preprocessing methods (ex. deleting correlated values).}

\item{metrics}{A vector of metrics names. By default param set for `auto`, most important metrics are returned.
For `all` all metrics are returned. For `NULL` no metrics returned but still sorted by `sort_by`.}

\item{sort_by}{A string with a name of metric to sort by.
For `auto` models going to be sorted by `mse` for regression and `f1` for classification.}

\item{metric_function}{The self-created function.
It should look like name(predictions, observed) and return the numeric value.
In case of using `metrics` param with a value other than `auto` or `all`, is needed to use a value `metric_function`
in order to see given metric in report. If `sort_by` is equal to `auto` models are sorted by `metric_function`.}

\item{metric_function_name}{The name of the column with values of `metric_function` parameter.
By default `metric_function_name` is `metric_function`.}

\item{metric_function_decreasing}{A logical value indicating how metric_function should be sorted. `TRUE` by default.}

\item{best_model_number}{Number best models to be chosen as element of the return.
All trained models will be returned as different element of the return.}
}
\value{
A list of all necessary objects for other functions.
}
\description{
The `train()` function is the core function of this package.
The only obligatory arguments are `data` and `target`.
Setting and changing other arguments will affect model
validation strategy, tested model families, and so on.
}
\examples{
library(forester)
data('lisbon')
train_output <- train(lisbon, 'Price')
train_output$ranked_list
}
