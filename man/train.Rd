% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train.R
\name{train}
\alias{train}
\title{Train models with forester}
\usage{
train(
  data,
  y,
  type = "auto",
  engine = c("ranger", "xgboost", "decision_tree", "lightgbm"),
  verbose = TRUE,
  train_test_split = c(0.6, 0.2, 0.2),
  bayes_iter = 10,
  random_evals = 10,
  advanced_preprocessing = FALSE,
  metrics = "auto",
  sort_by = "auto",
  metric_function = NULL,
  metric_function_name = NULL,
  metric_function_decreasing = TRUE,
  best_model_number = 5
)
}
\arguments{
\item{data}{A `data.frame` or `matrix` - data which will be
used to build models. By default model will be trained
on all columns in the `data`.}

\item{y}{A target variable. It can be either
(1) a vector of the same number of observations as `data` or
(2) a character name of variable in the `data` that contains
the target variable.}

\item{type}{A character, one of `classification`/`regression`/`guess` that
sets the type of the task. If `guess` (the default option) then
forester will figure out `type` based on the number of unique values
in the `y` variable.}

\item{engine}{A vector of tree-based models that shall be tested.
Possible values are: `ranger`, `xgboost`, `decision_tree`, `lightgbm`, `catboost`.
All models from this vector will be trained and the best one will be returned.}

\item{verbose}{A logical value, if set to TRUE, provides all information about
training process, if FALSE gives none.}

\item{train_test_split}{A 3-value vector, describing the proportions of train,
test, validation subsets to original data set. Default values are: c(0.6, 0.2, 0.2).}

\item{bayes_iter}{An integer value describing number of optimization rounds
used by the Bayesian optimization.}

\item{random_evals}{An integer value describing number of trained models
with different parameters by random search.}

\item{advanced_preprocessing}{A logical value describing, whether the user wants to use
advanced preprocessing methods (ex. deleting correlated values).}

\item{metrics}{A vector of metrics names. By default param set for `auto`, most important metrics are returned.
For `all` all metrics are returned. For `NULL` no metrics returned but still sorted by `sort_by`.}

\item{sort_by}{A string with a name of metric to sort by.
For `auto` models going to be sorted by `mse` for regression and `f1` for classification.}

\item{metric_function}{The self-created function.
It should look like name(predictions, observed) and return the numeric value.
In case of using `metrics` param with a value other than `auto` or `all`, is needed to use a value `metric_function`
in order to see given metric in report. If `sort_by` is equal to `auto` models are sorted by `metric_function`.}

\item{metric_function_name}{The name of the column with values of `metric_function` parameter.
By default `metric_function_name` is `metric_function`.}

\item{metric_function_decreasing}{A logical value indicating how metric_function should be sorted. `TRUE` by default.}

\item{best_model_number}{Number best models to be chosen as element of the return.
All trained models will be returned as different element of the return.}
}
\value{
A list of all necessary objects for other functions. It contains:
`type` The type of the ML task. If the user did not specify a type in the
input parameters, the algorithm recognizes, uses and returns the same type.
It could be 'regression' or 'classification'.
`deleted_columns` Column names from the original data frame that have been
removed in the data preprocessing process, e.g. due to too high correlation
with other columns.
`preprocessed_data` The data frame after the preprocessing process - that
means: removing columns with one value for all rows, binarizing the target
column, managing missing values and in advanced preprocessing: deleting
correlated values, deleting columns that are ID-like columns and performing
Boruta algorithm for selecting most important features.
`bin_labels` Labels of binarized target value - {1, 2} values for binary
classification and NULL for regression.
`train_data` The training dataset - the part of the source dataset after
preprocessing, balancing and splitting into the training, test and validation
datasets.
`test_data` The test dataset - the part of the source dataset after
preprocessing, balancing and splitting into the training, test and
validation datasets.
`valid_data` The validation dataset - the part of the source dataset after
preprocessing, balancing and splitting into the training, test and validation
datasets.
`predictions` Prediction list for all trained models based on the training
dataset.
`ranked_list` The list of metrics for all trained models. For regression task
there are: mse, r2 and mad metrics. For the classification task there are:
f1, auc, recall, precision and accuracy.
`models_list` The list of all trained models.
`data` The original data.
`y` The original target column name.
`test_observed` Values of y column from the test dataset.
`train_observed` Values of y column from the training dataset.
`valid_observed` Values of y column from the validation dataset.
`test_observed_labels` Values of y column from the test dataset as text labels
(for classification task only).
`train_observed_labels` Values of y column from the training dataset as text
labels (for classification task only).
`valid_observed_labels` Values of y column from the validation dataset as text
labels (for classification task only).
`best_models` Ranking list of top 10 trained models - with default
parameters, with parameters optimized with the Bayesian optimization
algorithm and with parameters optimized with the random search algorithm.
`engine` The list of names of all types of trained models. Possible
values: 'ranger', 'xgboost', 'decision_tree', 'lightgbm', 'catboost'.
`predictions_all` Predictions for all trained models.
`predictions_best` Predictions for models from best_models list.
`predictions_all_labels` Predictions for all trained models as text labels
(for classification task only).
`predictions_best_labels` Predictions for models from best_models list as
labels (for classification task only).
`raw_train` The another form of the training dataset (useful for creating
VS plot and predicting on training dataset for catboost and lightgbm models).
`outliers` The vector of possible outliers detected by the `check_data()`.
}
\description{
The `train()` function is the core function of this package.
The only obligatory arguments are `data` and `target`.
Setting and changing other arguments will affect model
validation strategy, tested model families, and so on.
}
\examples{
library(forester)
data('lisbon')
train_output <- train(lisbon, 'Price')
train_output$ranked_list
}
